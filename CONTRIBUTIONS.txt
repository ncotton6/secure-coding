Nathaniel Cotton:

In the beginning of the project I worked on reading documentation of what a
Rootkit is and what some of the typical functionality that they provide to 
an end user (hackers).  With this information helped to create an 
application design that could be used to build a simplistic rootkit that 
could infect a computer.  Fairly early on I wrote some code that would allow
for the X11 library to be used to log the keys that user typed in.  From
there I explored how this keylogger could be integrated into a rootkit to
provide some additional functionality (a complete rootkit would have more
features than just a keylogger). 

I designed the rootkit to tap into the keylogger to collect the keys and 
send them to an external server.  From there I worked with Praful and Hongyu
to create a networking module using UDP to connect the infected computer
to the external server.  During this process a message format needed to be
developed to overcome the lack of reliability that UDP has. On the server
I wrote the portion that reconstructed the segmented data that the infected
computer could potentially send.

Finally, I worked on creating the poster and writing up the report for this
project.


Praful:
Starting off I along with Nate and Hongyu started discussing the requirements of a rootkits
and brainstorming the possible approaches that one would take while building one. We finally 
agreed upon building a keylogger and a network functionality attached to the rootkit.
I read up on documentation online about requisite features and design of a keylogger and worked
with Nate to on that. 
Coming to the Network functionality part of the project, we were initially brainstorming about 
what kind of protocol we would be using for your network model. We went with UDP. I initially coded 
up the network infrastructure (both client and server) as UDP packets are exchanged. This code was later
modified by Nate to fit it in our project. 
I came up with a design for the message object(more like a json object) and coded up the portion.
The reason for this design idea was to overcome the shortcomings that came along with
picking UDP over TCP as a protocol (We had to make sure we weren't losing any packets). Using this feature we
could keep track of all the messages leaving the client to the server and vice versa.

Lastly, I worked on designing and writing up the poster and contributing to the report. 


Hongyu Zhao:

In the beginning of the project, I worked on the reading documentation of the 
implementation of keylogger and shared the website with Nate and Praful. Since 
Nate's X11 keylogger function couldn't work in windows, I wrote a keylistener 
function in Java. But we decided to abandon that function.

Then I talked with Praful decided to build the network function by UDP. I blinded the 
port and used the static server address to build the connection between the server and 
client. And I created the sending function in the client and the replying function in the
server to make sure the cilent would be able to send the information any time and the 
server would be able to reply the information to control the client performance each time.
Considering about the mult-clients, we decided to re-build the message format. According 
to praful's message format, I re-built the sending message part. However it didn't work 
well, so Nate had to re-built that again.

Finally, I worked on adding information for the poster and writing up the report for
this project.


